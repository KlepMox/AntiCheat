package me.rida.anticheat.ExploitException;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.json.simple.JSONValue;

import com.comphenix.protocol.wrappers.nbt.NbtCompound;
import com.comphenix.protocol.wrappers.nbt.NbtFactory;

@SuppressWarnings("serial")
public class ExploitException extends Throwable {
	public ItemStack itemStack = null;

	public ExploitException(String message) {
		super(message);
	}

	public ExploitException(String message, Throwable cause) {
		super(message, cause);
	}

	public ExploitException(String message, ItemStack itemStack) {
		super(message);
		this.itemStack = itemStack;
	}
	@SuppressWarnings("deprecation")
	public
	String itemstackToLogString(String startString) {
		if (itemStack == null) {
			return "";
		}
		try {
			final Material type = itemStack.getType();
			final List<String> list = new ArrayList<>();
			if (type.isBlock()) {
				list.add("Block");
			}
			if (type.isBurnable()) {
				list.add("Burnable");
			}
			if (type.isEdible()) {
				list.add("Edible");
			}
			if (type.isFlammable()) {
				list.add("Flammable");
			}
			if (type.isOccluding()) {
				list.add("Occluding");
			}
			if (type.isRecord()) {
				list.add("Record");
			}
			if (type.isSolid()) {
				list.add("Solid");
			}
			if (type.isTransparent()) {
				list.add("Transparent");
			}
			final int typeId = itemStack.getData().getItemType().getId();
			final byte typeData = itemStack.getData().getData();

			final NbtCompound root = (NbtCompound) NbtFactory.fromItemTag(itemStack);
			return String.format("%s %s:%d (%d:%d) x %d%s, nbt:%s",
					startString,
					itemStack.getType(), itemStack.getDurability(), typeId, typeData, itemStack.getAmount(),
					list.size() > 0 ? String.format(" (%s)", String.join("|", list)) : "",
							JSONValue.toJSONString(root)
					);

		} catch (final Throwable ex) {
			return " Error while deserializing ItemStack";
		}
	}

	public boolean hasItemStack() {
		return itemStack != null;
	}
}